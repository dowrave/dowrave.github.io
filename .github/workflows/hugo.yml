# Github Action은 로컬 환경과 완전히 독립적으로 동작함!

# 워크플로우의 이름, Github 저장소의 Action 탭에서 표시됨
name: Deploy Hugo site to Pages


on: # 워크플로우 실행 이벤트 지정
  push: # 브랜치에 푸시될 때 자동 실행
    branches: ["main"]
  workflow_dispatch: # 깃허브 웹 인터페이스에서 수동 실행 가능

permissions: # 워크플로우 권한 설정
  contents: read # 저장소 내용 읽기 권한
  pages: write # 깃허브 페이지 업데이트 권한
  id-token: write # OIDC 토큰 생성 권한 

concurrency: # 같은 워크플로우의 중복 실행 관리
  group: "pages" # 동일 그룹 내 워크플로우 실행 제한
  cancel-in-progress: false # 이미 실행 중인 워크플로우 취소하지 않음

jobs: # 워크플로우의 작업들
  build: # 1번째 작업 이름
    runs-on: ubuntu-latest # 우분투 최신 버전에서 실행
    steps:
      - name: Checkout # git 저장소를 가져옴
        uses: actions/checkout@v3 
        with:
          submodules: recursive # git 서브모듈(테마 등)도 가져옴
      - name: Setup Hugo # Hugo 설치 단계
        uses: peaceiris/actions-hugo@v2 # 많이 사용되는 Hugo 설치 액션
        with:
          hugo-version: 'latest'
          extended: true # SCSS/SASS 지원을 위한 확장 버전 사용
      - name: Build with Hugo # 실제 Hugo 사이트 실행 명령어 실행
        run: hugo --minify # 최소 출력으로 사이트 빌드
      - name: Upload artifact # 빌드된 파일을 Github Actions 아티팩트로 업로드
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public # Hugo가 생성한 정적 파일 디렉토리 지정

  deploy: # 배포 작업
    environment: # 배포 환경
      name: github-pages # github Page 사용
      url: ${{ steps.deployment.outputs.page_url }} # 배포 URL(자동 설정)
    runs-on: ubuntu-latest
    needs: build # build 작업 후에만 실행됨
    steps:
      - name: Deploy to GitHub Pages # 실제 Github Pages에 배포되는 단계
        id: deployment
        uses: actions/deploy-pages@v2 # Github에서 제공되는 공식 Pages 배포 액션  